#! /bin/sh

USAGE="git test-range RANGE COMMAND..."

LONG_USAGE="Run COMMAND for each commit in the specified RANGE in reverse order,
stopping if the command fails.  The return code is that of the last
command executed (i.e., 0 only if the command succeeded for every
commit in the range)."

SUBDIRECTORY_OK=TRUE

notes_ref=

. "$(git --exec-path)/git-sh-setup"

read_note() {
    if test -z "$notes_ref"
    then
        echo "unknown"
    else
        r="$1"
        git notes --ref=$notes_ref show "$r^{tree}" 2>/dev/null ||
            echo "unknown"
    fi
}

write_note() {
    if test -z "$notes_ref"
    then
        return
    fi
    r="$1"
    value="$2"
    if git notes --ref=$notes_ref add "$r^{tree}" -m "$value"
    then
        echo "Marked tree $r^{tree} to be $value"
    else
        echo 1>&2 "fatal: error adding note to $r^{tree}"
        exit 3
    fi
}

forget_note() {
    if test -z "$notes_ref"
    then
        return
    fi
    r="$1"
    if ! git notes --ref=$notes_ref remove --ignore-missing "$r^{tree}"
    then
        echo 1>&2 "fatal: error removing note from $r^{tree}"
        exit 3
    fi
}

test_revision() {
    r="$1"
    shift
    git --no-pager log -1 --decorate $r &&
    git co $r &&
    if test -n "$command"
    then
        eval "$command"
    else
        "$@"
    fi
}

setup_test() {
    echo "setup_test $*"
    name="$1"
    notes_ref="tests/$name"
    command="$(git config --get "test.$name.command")"
    echo "Using test $name; command: $command"
}

require_clean_work_tree "test-range"

command=
force=false
forget=false
while test $# != 0
do
    case "$1" in
        --test)
            if test $# -lt 2
            then
                usage
                exit 2
            fi
            setup_test "$2"
            shift 2
            ;;
        --test=*)
            setup_test "$(echo "$1" | sed -e 's/^--test=//')"
            shift
            ;;
        --force|-f)
            force=true
            shift
            ;;
        --forget)
            forget=true
            shift
            ;;
        *)
            break
            ;;
    esac
done

if test $# -lt 1
then
    usage
    exit 2
fi

range="$1"
shift

if test $# != 0
then
    # Use the rest of the arguments as the test command line.
    if test -n "$command"
    then
        echo "error: both --test and command specified!"
        exit 2
    fi
else
    if test -z "$name"
    then
        setup_test "default"
    fi
fi


head=$(git symbolic-ref HEAD 2>/dev/null || git rev-parse HEAD)

if $force || $forget
then
    for r in $(git rev-list --reverse "$range")
    do
	forget_note $r
    done

    if $forget
    then
	exit 0
    fi
fi

for r in $(git rev-list --reverse "$range")
do
    rs="$(git rev-parse --short "$r")"
    status="$(read_note $r)"
    echo "Old status: $status"
    case "$status" in
        "good")
            echo "Tree $rs^{tree} is already known to be good."
            ;;
        "bad")
            echo "Tree $rs^{tree} is already known to be bad!"
            exit 1
            ;;
        "unknown")
            test_revision $r "$@"
            retcode=$?
            if test $retcode = 0
            then
                write_note $r "good"
            else
                echo
                echo "*******************************************************************************"
                echo "FAILED ON COMMIT $r"
                echo
                git --no-pager log -1 --decorate $r
                echo "*******************************************************************************"
                echo
                echo "FAILURE!"
                write_note $r "bad"
                exit $retcode
            fi
            ;;
        *)
            echo 1>&2 "fatal: unrecognized status for tree $rs^{tree}!"
            exit 3
            ;;
    esac
done

git checkout -f ${head#refs/heads/}

echo
echo "ALL TESTS SUCCESSFUL"
exit 0

